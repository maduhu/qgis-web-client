Quantum GIS (QGIS) Web Client
Installation Guide
%%date(%A %B %d, %Y)

%! target       : html
%! style        : style.css
%! Options      : --toc --toc-level 2 --enum-title --css-sugar --css-inside
%! preproc      : TUT_URL   https://qgis.org
%! PostProc(html): '(?i)(<pre>)' '<div class="code">\1'
%! PostProc(html): '(?i)(</pre>)' '\1</div>'
% Next line will replace tabs with 2 spaces in txt generated outputs
%! PostProc(txt): '(?i)(\t)' '  '
%! encoding: iso-8859-1
%
% Tex processing
%
% Make sure this is first
%! PostProc(tex): '\\includegraphics' '\\includegraphics[width=100mm]'
% scartcl is from the koma script document class (apt-get install texlive-latex-recommended ttf-komatuna)
% setlength parindent suppresses first line of paragraph idents
% parskip puts blank space between paragraphs
% title pic stuff used to put a logo on the front page
%! PostProc(tex): '\\documentclass{article}' '\\documentclass{scrartcl}\n\\setlength{\\parindent}{0pt}\n\\setlength{\\parskip}{2ex}'
% use the color table and table packages so we can pimp the tables a little
%! PostProc(tex): '\\usepackage{style.css}  % user defined' '\\usepackage{fancyvrb}\n\\usepackage{colortbl} \n\\usepackage [table]{xcolor}\n\\definecolor{tableShade}{HTML}{cecece}\n\\definecolor{qgis-green}{HTML}{0E7300}\n\\usepackage{wallpaper}\n\\LRCornerWallPaper{1}{WALLPAPER-IMAGE}\n\\usepackage{hyperref}\n\\hypersetup{linkcolor=qgis-green,urlcolor=qgis-green}\\renewcommand\\thesection{\\color{qgis-green}\\thechapter\\arabic{section}}'
% Make the header row of tables have a dark background. light text
%! PostProc(tex): '\\hline \\textbf' '\\hline \\rowcolor[rgb]{0,0,0} \\color{white} \\textbf'
%! PostProc(tex): '& \\textbf' '& \\color{white} \\textbf'
% Make verbatim text a little smaller and use fancyvrb package to draw it in a box
% Note Verbatim with capital V for fancyvrb to work
%! PostProc(tex): '\\begin{verbatim}' '{\\scriptsize\\begin{Verbatim}[frame=single,rulecolor=\\color{qgis-green}, framesep=4mm, label=\\fbox{\\small\\emph{Listing}}]'
%! PostProc(tex): '\\end{verbatim}' '\\end{Verbatim}\n}'
%! PostProc(tex): '\\section' '\\newpage\\section'
%! PostProc(tex): 'section{' 'section{\\color{qgis-green}'
%! PostProc(tex): NEWPAGE  '\\newpage'
% Give alternating table rows different colours and use a smaller font in tables (\tiny)
%! PostProc(tex): '\\begin{tabular}' '\\rowcolors{2}{tableShade}{white} \n\\tiny\\begin{tabular}'
%! encoding: iso-8859-1

%! PostProc(tex): WALLPAPER-IMAGE 'qgis-footer.png'
% These are comments and will not be generated in any output
% -------------------

%This document is in txt2tags format. You can generate html, plain text and
%moinmoin formatted documentation by running txt2tags on this document. See the
%txt2tags home page for more details.  Please insert manual line breaks in this
%document as it makes diffing for changes much easier. To do this in vim 
%automatically, select a section then issue (gq) command. Please don't
%apply vim formatting to the whole document as it screws up some formatting
%rather apply it selectively to paragraphs where needed.

% To generate the text version of this document:
% txt2tags -t txt -o README README.t2t
% To generate the mediawiki version of this document:
% txt2tags -t wiki --no-enum-title -o README.wiki README.t2t
% To generate the html version of this document:
% txt2tags -t html -o README.html README.t2t
% To generate the LaTeX version of this document:
% txt2tags -t tex -o README.tex README.t2t; pdflatex README.tex

% End of comments
% -------------------

Last Updated: %%date(%A %B %d, %Y)
Last Change : %%mtime(%A %B %d, %Y)

%%toc

= For the terminally lazy =

```
sudo apt-get install apache2 libapache2-mod-fcgid
cp apache-conf/qgis-web-client.conf.templ apache-conf/qgis-web-client.conf
```

Update the paths in the copied file then:

```
cd /etc/apache2/sites-available/
ln -s <path to apache-conf/qgis-web-client.conf> .
sudo a2ensite qgis-web-client.conf
sudo /etc/init.d/apache2 reload
```

Check the symlink in cgi-bin is correct.
Check the QGIS libs are in your /etc/ld.so.conf path
Copy site/index.xml and check paths match your system


= Purpose =

A WMS based webgis client that makes use of QGIS specific WMS extensions (e.g.
highlighting, printing, metadata, etc.). QGIS webclient reads the configuration
from the WMS GetCapabilities command and builds the layer tree accordingly.
Supports legend graphic, feature info requests and printing.

The client builds on existing Web-GIS libraries OpenLayers and GeoExt, as well
as ExtJS 3 for the GUI widgets.

All major browsers should be supported.

= Installation =

Requirements (Server):
- Apache2 - Webserver (Ubuntu: apache2)
- mod-fcgid (Ubuntu: libapache2-mod-fcgid)
- QGIS and QGIS Server (best installed from source)
-

On ubuntu you can meet these requirements by simply doing:

```
sudo apt-get install libapache2-mod-fcgid
```

The QGIS server compilation and installation will be covered in the QGIS manual.

For searching:
- python-wsgi for searching (Ubuntu: libapache2-mod-wsgi)
- psycopg2 PostgreSQL db driver (Ubuntu: python-psycopg2)
- webob - Python module providing WSGI request and response objects (Ubuntu: python-webob)
-

The client part needs svn checkout with the following command:
svn co https://svn.osgeo.org/qgis/trunk/qgiswebclient qgiswebclient

= Configuration of Client =

Global Settings for all projects:
```
js/GlobalConfiguration.js
```

Translations (additional languages):
```
js/Translations.js
```

Project settings and index:
```
index.xml
```

Stylesheet of project index:
```
gis-project_listing.xsl
```
Thumbnails for individual projects:
```
thumbnails/projectname.png
```

= Configuration of search python script =

Searching is handled by two separate python-wsgi scripts: "search.wsgi" lists
back a hit list while the user is typing in the searchbox. It groups the
results and returns a bounding box of the result. "getSearchGeom.wsgi" returns
the actual wkt geometry for a selected search result. It is recommended to
install the wsgi scripts in a separate directory, e.g. /home/www/wsgi, a place
that is not reachable by regular web traffic.

You need to enable mod_wsgi as root. (Ubuntu: a2enmod mod_wsgi).

You need to configure apache with the following lines (e.g. in file
/etc/apache2/sites-available/default):

```
#mod_wsgi
WSGIDaemonProcess gis processes=5 threads=15 display-name=%{GROUP}
WSGIScriptAlias /wsgi/ /home/www/wsgi/
WSGIScriptAliasMatch ^/wsgi/([^/]+) /home/www/wsgi/$1.wsgi
```

In the files "search.wsgi" and "getSearchGeom.wsgi" please edit the line
containing the db connection strings. Search for the line 

```
conn = psycopg2.connect("db='yourdb' port='5432' user='yourusername' password='yourpassword'")
```

and adapt the parameters according to your server/db.

= PostgreSQL table setup for searching =

```
CREATE TABLE cadastre.searchtable
(
  searchstring text, --the search string (all lower case), e.g. "zürichstrasse 46, 8610 uster"
  displaytext text NOT NULL, --the display text for the search combobox, e.g. "Zürichstrasse 46, 8610 Uster (address)"
  search_category text, --should have a leading two digit number:, e.g.
                        --"03_parcels", where 03 is the order of the search categories, the number
                        --should be unique across all search tables
  the_geom geometry,    --the actual geometry
  geometry_type text,   --the geometry type as returned by ST_GeometryType(the_geom)
  searchstring_tsvector tsvector,
  CONSTRAINT searchtable_pkey PRIMARY KEY (displaytext)
)
WITH (
  OIDS=FALSE
);
GRANT SELECT ON TABLE cadastre.searchtable TO alle;

-- Index: cadastre.in_cadastre_searchstring_tsvector_gin

CREATE INDEX in_cadastre_searchstring_tsvector_gin
  ON cadastre.searchtable
  USING gin
  (searchstring_tsvector);
```

The above search table can also be a view or materialized view. One can combine
several search tables by specifying the ```searchtables=searchtable1,searchtable2,searchtable3``` 
parameter when requesting the //search.wsgi// script.


= License =

BSD

= Acknowledgements =

We'd like to thank the OpenLayers and GeoExt team for providing their base libraries.

